name: Chart - Online Players — Last 30 Days

on:
  workflow_dispatch:

jobs:
  chart-30d:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Generate 30-Day chart & post to Discord
        shell: pwsh
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          $html = (Invoke-WebRequest 'https://www.playgenerals.online/servicestats' -UseBasicParsing -ErrorAction Stop).Content

          $playersRaw = ($html -split 'player_stats_30d_data_players = \[')[1] -split '\];' | Select-Object -First 1
          $labelsRaw  = ($html -split 'data_30d_labels = \[')[1] -split '\];' | Select-Object -First 1

          $players = $playersRaw -split ',' |
                     ForEach-Object { ($_ -replace '"','').Trim() } |
                     Where-Object { $_ -ne '' } |
                     ForEach-Object { [int]$_ }

          # Compact label formatter: remove ordinals, try parse, fallback to token reformat
          function Format-Label([string]$token) {
            if (-not $token) { return $null }
            $t = ($token -replace '"','').Trim()
            $t = $t -replace '(\d+)(st|nd|rd|th)', '$1'
            try {
              $dt = [datetime]::Parse($t)
              return $dt.ToString('MMM d').ToLower()
            } catch {
              $parts = $t -split '\s+'
              if ($parts.Count -eq 2 -and ($parts[0] -as [int])) {
                # "2 Oct" -> "Oct 2"
                try {
                  $dt = [datetime]::Parse("$($parts[1]) $($parts[0]) $(Get-Date).Year")
                  return $dt.ToString('MMM d').ToLower()
                } catch { return $t.ToLower() }
              } elseif ($parts.Count -eq 2) {
                # "Oct 2" -> ok
                try {
                  $dt = [datetime]::Parse("$t $(Get-Date).Year")
                  return $dt.ToString('MMM d').ToLower()
                } catch { return $t.ToLower() }
              } else {
                return $t.ToLower()
              }
            }
          }

          $labels = $labelsRaw -split ',' |
                    ForEach-Object { Format-Label $_ } |
                    Where-Object { $_ -ne $null -and $_ -ne '' }

          $count = [Math]::Min($players.Count, $labels.Count)
          if ($players.Count -ne $labels.Count) {
            Write-Host "Warning: players count ($($players.Count)) and labels count ($($labels.Count)) differ. Truncating to $count."
            $players = $players[0..($count - 1)]
            $labels  = $labels[0..($count - 1)]
          }

          $colors = for ($i = 0; $i -lt $players.Count; $i++) { if ($i % 2 -eq 0) { '#bdba33' } else { '#dedb2a' } }

          $cfg = @{
            type = 'bar'
            data = @{
              labels = $labels
              datasets = @(@{
                label = 'Players'
                data = $players
                backgroundColor = $colors
                borderColor = $colors
                fill = $true
              })
            }
            options = @{
              responsive = $false
              plugins = @{
                datalabels = @{
                  display = $true
                  color = 'white'
                  anchor = 'end'
                  align = 'top'
                  font = @{ size = 9; weight = 'bold' }
                  offset = -4
                  formatter = 'function(v){return v;}'
                }
              }
              title = @{
                display = $true
                text = 'Online Players — Last 30 Days'
                color = 'red'
                font = @{ size = 26; weight = 'bold'; family = 'Arial' }
              }
              legend = @{ display = $false }
              scales = @{
                x = @{ ticks = @{ maxRotation = 0; minRotation = 0; autoSkip = $false; font = @{ size = 9 } } }
                y = @{ beginAtZero = $true; ticks = @{ font = @{ size = 8 } } }
              }
              layout = @{ padding = @{ top = 90; left = 10; right = 30; bottom = 10 } }
            }
          } | ConvertTo-Json -Depth 12 -Compress

          $encoded = [Uri]::EscapeDataString($cfg)
          $width = 1400; $height = 700
          $chartUrl = "https://quickchart.io/chart?c=$encoded&w=$width&h=$height"
          Write-Host "Chart URL: $chartUrl"
          Invoke-WebRequest -Uri $chartUrl -OutFile Online30DayChart.png -ErrorAction Stop

          Invoke-WebRequest 'https://i.imgur.com/Zo9RY7b.png' -OutFile logo.png -ErrorAction Stop
          $magick = (Get-Command magick -ErrorAction SilentlyContinue)?.Source
          if (-not $magick) { $magick = (Get-Command convert -ErrorAction SilentlyContinue)?.Source }
          if (-not $magick) { throw "ImageMagick not found" }

          & $magick logo.png -resize 200x200\> logo-resized.png
          & $magick Online30DayChart.png logo-resized.png -gravity north -geometry +10+10 -composite Online30DayChart.png

          Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -Form @{
            payload_json = (@{ content = '' } | ConvertTo-Json -Compress)
            file = Get-Item Online30DayChart.png
          }
